Variables can hold values, and every value has a data-type. Python is a dynamically typed language; hence we do not need to define the type of the variable while declaring it.
 The interpreter implicitly binds the value with its type.

a = 5  
The variable a holds integer value five and we did not define its type. Python interpreter will automatically interpret variables a as an integer type.

Python enables us to check the type of the variable used in the program. Python provides us the type() function, which returns the type of the variable passed.

Consider the following example to define the values of different data types and checking its type.

a=10  
b="Hi Python"  
c = 10.5  
print(type(a))  
print(type(b))  
print(type(c))
  
Output:

<type 'int'>
<type 'str'>
<type 'float'>

Assigning Values to Variables
Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is 
used to assign values to variables.

The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable.

counter = 100          # An integer assignment
miles   = 1000.0       # A floating point
name    = "John"

In Python, like in all programming languages,data types are used to classify one particular type of data.
This is important because the specific data type you use will determine what values you can assign to it and what you can do to it (including what operations you can perform on it)

Type of Data type :-​

Built-in Data type​
User Defined Data type